{"version":3,"sources":["main.js"],"names":["$siteList","$","$lastLi","find","x","localStorage","getItem","xObject","JSON","parse","hashMap","logo","url","simplifyUrl","replace","render","remove","forEach","node","index","$li","insertBefore","on","window","open","e","console","log","stopPropagation","splice","prompt","indexOf","push","toUpperCase","logoType","onbeforeunload","string","stringify","setItem","document","key","i","length","toLowerCase"],"mappings":"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","file":"main.b70597f3.js","sourceRoot":"..\\src","sourcesContent":["//测试监听，打印出则监听成功\r\n// $('.addButton').on('click', () => {\r\n//     console.log(1)\r\n// })\r\n\r\n//防止跳转页面后无法储存，通过数组（哈希表）保存下来,退出的时候，把新建的网住全部储存带hashMap，每次返回只需要渲染hashMap，即可导入之前全部的网址\r\nconst $siteList = $('.siteList')//打印出APi\r\n// console.log($siteList)\r\nconst $lastLi = $siteList.find('li.last')//重要jQuery找到对应选择器\r\n\r\n//从local Stora读取不在从hashMap中提取//首先尝试读取当前网站下的x\r\nconst x = localStorage.getItem('x')//现在我们需要把需要获取的x（网址数据）储存到hashMAp中，而hashMa数组为对象，所有需要把x转换成对象，如果x成功变成对象\r\nconst xObject = JSON.parse(x)//JSON.parse() 方法用于将一个 JSON 字符串转换为对象。\r\n\r\nconst hashMap = xObject || [//（如果x成功变成对象就把对象放到hashMap中，如果不行就初始换含有两项的数组）如果xObject存在就用xObject，不存在就用默认hashMap数组\r\n    { logo: 'A', url: 'https://www.acfun.cn/' },\r\n    // { logo: './images/images.png', logoType: 'image', url: 'https://juejin.im/' },\r\n    { logo: 'J', url: 'https://juejin.im/' },\r\n]\r\n\r\n// hashMap.forEach(node => {\r\n//     const $li = $(`<li>\r\n//                 <a href=\"https://www.acfun.cn/\">\r\n//                     <div class=\"site\">\r\n//                         <!-- site:网站-->\r\n//                         <div class=\"logo\">A</div>\r\n//                         <div class=\"link\">acfun.com</div>\r\n//                     </div>\r\n//                 </a>\r\n//             </li>\r\n//     `)\r\n// })\r\nconst simplifyUrl = (url) => {//replace删除原来的并替换成新的\r\n    return url.replace('https://', '')\r\n        .replace('http://', '')\r\n        .replace('www.', '')\r\n        .replace(/\\/.*/, '')//正则表达式：删除 / 开头的内容--防止用户输入过多的url后缀\r\n}\r\n//优化代码//封装//先删除之前的在储存新的\r\nconst render = () => {\r\n    $siteList.find('li:not(.last)').remove()//找到所有的node网址，唯独不着最后一个（新生成）进行清空，新生成不能删除！\r\n    hashMap.forEach((node, index) => {//删除功能需要索引值，通过forEach传入第二个参数idnex，获取索引\r\n        // console.log(index)//打印当前网页的索引值\r\n        const $li = $(`<li>        \r\n                    <div class=\"site\">\r\n                        <div class=\"logo\">${node.logo}</div>\r\n                        <div class=\"link\">${simplifyUrl(node.url)}</div>\r\n                        <div class='close'>\r\n                          <svg class=\"icon\">//监听点击，阻止冒泡\r\n                             <use xlink:href=\"#icon-close\"></use>\r\n                          </svg>                      \r\n                        </div>\r\n                    </div>                \r\n            </li>`).insertBefore($lastLi)\r\n\r\n        $li.on('click', () => {//代替<a>标签\r\n            window.open(node.url)//$li里的<a href=\"${node.url}\"></a>删除，跳转页面node.url的操作通过winodw.open执行//原因<a>标签太粗糙了，不灵敏，通过js控制更好\r\n        })\r\n\r\n        $li.on('click', '.close', (e) => {//阻止冒泡防止触发跳转事件\r\n            console.log('阻止')\r\n            e.stopPropagation()//js 阻止冒泡阻止跳转 \r\n            console.log(hashMap)\r\n            //拿到index索引后，删除数组需要通过splice()方法\r\n            hashMap.splice(index, 1)\r\n            render()//删掉之后需要重新渲染！不然不会显示\r\n        })\r\n    })\r\n}\r\nrender()\r\n\r\n// $('.addButton').on('click', () => {\r\n//     let url = window.prompt('请问你要添加的网址是什么?')\r\n//     console.log(url)\r\n//     if (url.indexOf('http') !== 0) {//帮助用户输入前缀//JavaScript indexOf() 方法\r\n//         // alert('请输入http开头的网址')\r\n//         url = 'https://' + url\r\n//     }\r\n//     console.log(url)\r\n//     const $site = $(`\r\n//            <li>\r\n//                 <a href=\"${url}\">\r\n//                     <div class=\"site\">\r\n//                         <!-- site:网站-->\r\n//                         <div class=\"logo\">\r\n//                             ${url[0]}\r\n//                         </div>\r\n//                         <div class=\"link\">${url}</div>\r\n//                     </div>\r\n//                 </a>\r\n//             </li>\r\n//     `).insertBefore($lastLi)\r\n// })\r\n\r\n$('.addButton').on('click', () => {\r\n    let url = window.prompt('请问你要添加的网址是什么?')\r\n    console.log(url)\r\n    if (url.indexOf('http') !== 0) {//帮助用户输入前缀//JavaScript indexOf() 方法\r\n        // alert('请输入http开头的网址')\r\n        url = 'https://' + url\r\n    }\r\n    console.log(url)\r\n    hashMap.push({\r\n        logo: simplifyUrl(url)[0].toUpperCase(),//logo为网址的首字母//toUpperCaase小写变大写\r\n        logoType: 'text',\r\n        url: url\r\n    });\r\n    //重新渲染一遍，但需要删除之前的网址节点\r\n    // hashMap.forEach(node => {\r\n    //     const $li = $(`<li>\r\n    //             <a href=\"${node.url}\">\r\n    //                 <div class=\"site\">\r\n    //                     <!-- site:网站-->\r\n    //                     <div class=\"logo\">${node.logo[0]}</div>\r\n    //                     <div class=\"link\">${node.url}</div>\r\n    //                 </div>\r\n    //             </a>\r\n    //         </li>\r\n    // `).insertBefore($lastLi)\r\n    // })\r\n    // $siteList.find('li:not(.last)').remove()//找到所有的node网址，唯独不着最后一个（新生成）进行清空，新生成不能删除！\r\n    render()\r\n\r\n})\r\n//js 用户关闭页面之前会触发\r\n//window.onbeforeunload(监听)\r\n//当你关闭页面时，把hashMap数组变换字符串储存到网站下的localStorage\r\n//保证数据不会丢失，用户离开/退出/填写时，把数据储存到localStora下，返回时直接渲染localStoral数据即可\r\nwindow.onbeforeunload = () => {\r\n    // console.log('页面关闭')\r\n    //node只能储存字符串，不能存对象，所有要转成字符串\r\n    const string = JSON.stringify(hashMap)//JSON.stringify() 方法用于将 JavaScript 值转换为 JSON 字符串。//js数组使用JSON.stringify()和toString()的区别\r\n    // console.log(typeof hashMap)\r\n    // console.log(hashMap)\r\n    // console.log(typeof string)\r\n    // console.log(string)\r\n\r\n    //本地储存，设置为x\r\n    // window.localStorage.setItem('x', string)\r\n    localStorage.setItem('x', string)\r\n\r\n}\r\n\r\n//为社么要通过localStorage下储存呢？（或者说localStorage中的数据为什么不会被删除呢？）\r\n//因为localStorage属于Cookie及其他网站的数据，只有手动删除才会删除（概率极小会被（硬盘满了）才会被浏览器删除），换句话说localStorage是安全的（非常保险）\r\n//含有一种情况就是：开启无痕窗口，只存在于用户打开的页面的事件，关闭重新开启就会消失；正常的窗口会把localStorage一直储存！！\r\n\r\n// 键盘事件\r\n$(document).on('keypress', (e) => {\r\n    // const key = e.key  //属性名与变量名为一样时,可以简写\r\n    const { key } = e\r\n    for (let i = 0; i < hashMap.length; i++) {\r\n        if (hashMap[i].logo.toLowerCase() === key) {\r\n            //打开网址window.open\r\n            window.open(hashMap[i].url)\r\n        }\r\n    }\r\n})"]}